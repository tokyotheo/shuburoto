第1章 はじめてのRuby
List 1.1 : helloruby.rb
1
print("Hello, Ruby.\n")
List 1.2 : put_and_p.rb
1
puts "Hello,\n\tRuby."
2
p "Hello,\n\tRuby."
List 1.3 : kiritsubo.rb
1
print "いづれの御時にか女御更衣あまたさぶらいたまいけるなかに\n"
2
print "いとやむごとなき際にはあらぬがすぐれて時めきたまふありけり\n"
List 1.4 : area_volume.rb
1
x = 10
2
y = 20
3
z = 30
4
area = (x*y + y*z + z*x) * 2
5
volume = x * y * z
6
print "表面積=", area, "\n"
7
print "体積=", volume, "\n"
List 1.5 : comment_sample.rb
01
=begin
02
 「たのしいRuby 第3版」サンプル
03
 コメントの使い方の例
04
    2006/06/16 作成
05
    2006/07/01 一部コメントを追加
06
    2009/11/01 第3版用に更新
07
=end
08
 
09
x = 10     #  横
10
y = 20     #  縦
11
z = 30     #  高さ
12
 
13
# 表面積と体積を計算する
14
area = (x*y + y*z + z*x) * 2
15
volume = x * y * z
16
 
17
# 出力する
18
print "表面積=", area, "\n"
19
print "体積=", volume, "\n"
List 1.6 : bigger_smaller.rb
1
a = 20
2
if a >= 10 then
3
  print "bigger\n"
4
end
5
if a <= 9 then
6
  print "smaller\n"
7
end
List 1.7 : hello_ruby.rb
1
def hello
2
  print "Hello, Ruby\n"
3
end
4
 
5
hello()
List 1.8 : hello.rb
1
def hello
2
  print "Hello, Ruby.\n"
3
end
List 1.9 : use_hello.rb
1
require "hello"     # hello.rbの読み込み(「.rb」は必要ない)
2
hello()             # helloメソッドの起動
第2章 便利なオブジェクト
List 2.1 : fontsize.rb
1
print "<html><title>font size list</title>"
2
print "<body>\n<p>\n"
3
font_table = {:normal => "+0", :small => "-1", :big => "+1"}
4
font_table.each do |key, value|
5
  print '<font size="', value, '">',key,'</font><br>',"\n"
6
end
7
print "</p></body></html>\n"
コラム「nilとは？」: print_hayasi.rb
1
names = ["小林", "林", "高野", "森岡"]
2
names.each do |name|
3
  if /林/ =~ name
4
    puts name
5
  end
6
end
コラム「ppメソッド」: p_and_pp.rb
01
require "pp"
02
v = [
03
  {
04
    :key_00 => "「たのしいRuby」",
05
    :key_01 => "「Rubyレシピブック」",
06
    :key_02 => "「Railsレシピブック」",
07
    :key_03 => "「たのしいRuby 第3版」",
08
  }
09
]
10
p v
11
pp v
第3章 コマンドを作ろう
List 3.1 : print_argv.rb
1
print "最初の引数: ",  ARGV[0], "\n"
2
print "2番目の引数: ", ARGV[1], "\n"
3
print "3番目の引数: ", ARGV[2], "\n"
List 3.2 : happybirthday.rb
1
name = ARGV[0]
2
print "Happy Birthday, ", name, "!\n"
List 3.3 : arg_arith.rb
1
num0 = ARGV[0].to_i
2
num1 = ARGV[1].to_i
3
 
4
print num0, " + ", num1, " = ", num0 + num1, "\n"
5
print num0, " - ", num1, " = ", num0 - num1, "\n"
6
print num0, " * ", num1, " = ", num0 * num1, "\n"
7
print num0, " / ", num1, " = ", num0 / num1, "\n"
List 3.4 : read_text.rb
1
filename = ARGV[0]
2
file = open(filename)
3
text = file.read
4
print text
5
file.close
List 3.5 : read_text_simple.rb
1
filename = ARGV[0]
2
text = File.read(filename)
3
print text
List 3.6 : read_text_simple.rb
1
print File.read(ARGV[0])
List 3.7 : gets_text.rb
1
filename = ARGV[0]
2
file = open(filename)
3
while text = file.gets
4
  print text
5
end
6
file.close
List 3.8 : simple_grep.rb
01
pattern = Regexp.new(ARGV[0])
02
filename = ARGV[1]
03
 3:
04
file = open(filename)
05
while text = file.gets
06
  if pattern =~ text
07
    print text
08
  end
09
end
10
file.close
第4章 オブジェクトと変数・定数
List 4.1 : scopetest.rb
1
$x = 0
2
 x = 0
3
 
4
require "sub"
5
 
6
p $x  #=> 1
7
p  x  #=> 0
List 4.2 : sub.rb
1
$x = 1  ## グローバル変数に代入
2
 x = 1  ## ローカル変数に代入
第5章 条件判断
List 5.1 : ad2heisei.rb
1
# 西暦から平成に変換する
2
 
3
ad = ARGV[0].to_i
4
heisei = ad - 1988
5
print heisei,"\n"
List 5.2 : if_elsif.rb
1
a = 10
2
b = 20
3
if b > a
4
  print  "bはaよりも大きい\n"
5
elsif b == a
6
  print  "bはaと同じ\n"
7
else
8
  print  "aよりも小さい\n"
9
end
List 5.3 : unless.rb
1
a = 10
2
b = 20
3
unless a > b
4
  print "aはbより大きくない\n"
5
end
List 5.4 : case.rb
01
tags = [ "A", "IMG", "PRE" ]
02
tags.each do |tagname|
03
  case tagname
04
  when "P","A","I","B","BLOCKQUOTE"
05
    print tagname, " has child.\n"
06
  when "IMG", "BR"
07
    print tagname, " has no child.\n"
08
  else
09
    print tagname, " cannot be used.\n"
10
  end
11
end
List 5.5 : case_class.rb
01
array = [ "a", 1, nil ]
02
array.each do |item|
03
  case item
04
  when String
05
    puts "item is a String."
06
  when Numeric
07
    puts "item is a Numeric."
08
  else
09
    puts "item is something."
10
  end
11
end
第6章 繰り返し
List 6.1 : times.rb
1
4.times do
2
  print "いちめんのなのはな\n"
3
end
List 6.2 : times2.rb
1
5.times do |i|
2
  print i,"回目の繰り返しです。\n"
3
end
List 6.3 : times3.rb
1
5.times do |i|
2
  print i+1,"回目の繰り返しです。\n"
3
end
List 6.4 : for.rb
1
sum = 0
2
for i in 1..5
3
  sum = sum + i
4
end
5
print sum,"\n"
List 6.5 : for_names.rb
1
names = ["awk", "Perl", "Python", "Ruby"]
2
for name in names
3
  print name,"\n"
4
end
List 6.6 : while.rb
1
i = 1
2
while i<3
3
  print i,"\n"
4
  i+=1
5
end
List 6.7 : while2.rb
1
sum = 0
2
i = 1
3
while i <= 5
4
  sum += i
5
  i += 1
6
end
7
print sum,"\n"
List 6.8 : while3.rb
1
sum = 0
2
i = 1
3
while sum < 50
4
  sum += i
5
  i += 1
6
end
7
print sum,"\n"
List 6.9 : until.rb
1
sum = 0
2
i = 1
3
until sum>=50
4
  sum += i
5
  i += 1
6
end
7
print sum, "\n"
List 6.10 : while_not.rb
1
sum = 0
2
i = 1
3
while !(sum >= 50)
4
  sum += i
5
  i += 1
6
end
7
print sum, "\n"
List 6.11 : each_names.rb
1
names = ["awk","Perl","Python","Ruby"]
2
names.each do |name|
3
  print name,"\n"
4
end
List 6.12 : each.rb
1
sum = 0
2
(1..5).each do |i|
3
  sum = sum + i
4
end
5
print sum,"\n"
List 6.13 : break_next_redo.rb
01
print "breakの例:\n"
02
i = 0
03
["Perl", "Python", "Ruby", "Scheme"].each do |lang|
04
  i += 1
05
  if i == 3
06
    break
07
  end
08
  p [ i, lang ]
09
end
10
10:
11
print "\nnextの例:\n"
12
i = 0
13
["Perl", "Python", "Ruby", "Scheme"].each do |lang|
14
  i += 1
15
  if i == 3
16
    next
17
  end
18
  p [ i, lang ]
19
end
20
20:
21
print "\nredoの例:\n"
22
i = 0
23
["Perl", "Python", "Ruby", "Scheme"].each do |lang|
24
  i += 1
25
  if i == 3
26
    redo
27
  end
28
  p [ i, lang ]
29
end
List 6.14 : ten_lines_grep.rb
01
pattern = Regexp.new(ARGV[0])
02
filename = ARGV[1]
03
max_matches = 10       # 出力する最大数
04
matches = 0            # マッチした行数
05
file = open(filename)
06
while text = file.gets
07
  if matches >= max_matches
08
    break
09
  end
10
  if pattern =~ text
11
    matches += 1
12
    print text
13
  end
14
end
List 6.15 : strip.rb
1
file = open(ARGV[0])
2
while text = file.gets
3
  next if /^\s*$/ =~ text   # 空白行
4
  next if /^#/ =~ text      # シャープで始まる行
5
  print text
6
end
List 6.16 : fact.rb
1
# 10の階乗を求める
2
ans = 1
3
for i in 1..10
4
  ans *= i
5
end
6
 
7
# 出力する
8
print "10! = ", ans, "\n"
List 6.17 : striped_fact.rb
1
ans = 1
2
for i in 1..10
3
  ans *= i
4
end
5
print "10! = ", ans, "\n"
第7章 メソッド
List 7.1 : hello_with_name.rb
1
def hello(name)
2
  print("Hello, ", name, ".\n")
3
end
4
 
5
hello("Ruby")
List 7.2 : hello_with_default.rb
1
def hello(name="Ruby")
2
  print("Hello, ", name, ".\n")
3
end
4
 
5
hello()            # 引数を省略して呼び出す
6
hello("Newbie")    # 引数を指定して呼び出す
第8章 クラスとモジュール
List 8.1 : hello_class.rb
01
class HelloWorld                 # class文
02
  Version = "1.0"                # 定数の定義
03
 
04
  def initialize(myname="Ruby")  # initializeメソッド
05
    @name = myname               # インスタンス変数の初期化
06
  end
07
 
08
  def hello                      # インスタンスメソッド
09
    print "Hello, world. I am ", @name, ".\n"
10
  end
11
end
12
 
13
bob   = HelloWorld.new("Bob")
14
alice = HelloWorld.new("Alice")
15
ruby  = HelloWorld.new
16
 
17
bob.hello
List 8.4 : hello_count.rb
01
class HelloCount
02
  @@count = 0           # helloメソッドの呼び出し回数
03
 
04
  def HelloCount.count  # 呼び出し回数を参照するためのクラスメソッド
05
    @@count
06
  end
07
  def initialize(myname="Ruby")
08
    @name = myname
09
  end
10
  def hello
11
    @@count += 1        # 呼び出し回数を加算する
12
    print "Hello, world. I am ", @name, ".\n"
13
  end
14
end
15
 
16
bob   = HelloCount.new("Bob")
17
alice = HelloCount.new("Alice")
18
ruby  = HelloCount.new
19
 
20
p HelloCount.count    #=> 0
21
bob.hello
22
alice.hello
23
ruby.hello
24
p HelloCount.count    #=> 3
List 8.5 : ext_string.rb
1
class String
2
  def count_word
3
    ary = self.split(/\s+/)   # 自分自身を空白文字で分解する
4
    return ary.size           # 分解後の配列の要素数を返す
5
  end
6
end
7
 
8
str = "Just Another Ruby Newbie"
9
p str.count_word              #=> 4
List 8.6 : acc_test.rb
01
class AccTest
02
  def pub
03
    puts "pub is a public method."
04
  end
05
  public :pub       # pubメソッドをpublicに設定（指定しなくてもよい）
06
  def priv
07
    puts "priv is a private method."
08
  end
09
  private :priv     # privメソッドをprivateに設定
10
end
11
 
12
acc = AccTest.new
13
acc.pub             #=> pub is a public method.
14
acc.priv            #=> エラー
List 8.7 : point.rb
01
class Point
02
  attr_accessor :x, :y  # アクセスメソッドを定義する
03
  protected :x=, :y=    # x=とy=をprotectedにする
04
 
05
  def initialize(x=0.0, y=0.0)
06
    @x, @y = x, y
07
  end
08
 
09
  def swap(other)                     # x, yの値を入れ換えるメソッド
10
    tmp_x, tmp_y = @x, @y
11
    @x, @y = other.x, other.y
12
    other.x, other.y = tmp_x, tmp_y   # 同一クラス内では呼び出すことができる
13
    return self
14
  end
15
end
16
 
17
p0 = Point.new
18
p1 = Point.new(1.0, 2.0)
19
p [ p0.x, p0.y ]        #=> [0.0, 0.0]
20
p [ p1.x, p1.y ]        #=> [1.0, 2.0]
21
 
22
p0.swap(p1)
23
p [ p0.x, p0.y ]        #=> [1.0, 2.0]
24
p [ p1.x, p1.y ]        #=> [0.0, 0.0]
25
 
26
p0.x = 10.0             #=> エラー
List 8.8 : ring_array.rb
01
ring_array.rb
02
class RingArray < Array    # スーパークラスを指定する
03
  def [](i)                # 演算子[]の再定義
04
    idx = i % size         # 新しいインデックスを求める
05
    super(idx)             # スーパークラスの同名のメソッドを呼ぶ
06
  end
07
end
08
 
09
eto = RingArray[ "子", "丑", "寅", "卯", "辰", "巳",
10
                 "午", "未", "申", "酉", "戌", "亥" ]
11
p eto[6]     #=> "午"
12
p eto[11]    #=> "亥"
13
p eto[15]    #=> "卯"
14
p eto[-1]    #=> "亥"
List 8.9 : mixin_sample.rb
01
module MyModule
02
  # 共通して提供したいメソッドなど
03
end
04
 
05
class MyClass1
06
  include MyModule
07
  # MyClass1 に固有のメソッドなど
08
end
09
 
10
class MyClass2
11
  include MyModule
12
  # MyClass2 に固有のメソッドなど
13
end
List 8.10 : hello_module.rb
01
module HelloModule            # module文
02
  Version = "1.0"             # 定数の定義
03
  def hello(name)             # メソッドの定義
04
    print "Hello, ", name, ".\n"
05
  end
06
  module_function :hello      # helloをモジュール関数として公開する
07
end
08
 
09
p HelloModule::Version        #=> "1.0"
10
HelloModule.hello("Alice")    #=> Hello, Alice.
11
 
12
include HelloModule           # インクルードしてみる
13
p Version                     #=> "1.0"
14
hello("Alice")                #=> Hello, Alice.
List 8.11 : fetch_and_downcase.rb
1
def fetch_and_downcase(ary, index)
2
  if str = ary[index]
3
    return str.downcase
4
  end
5
end
6
 
7
ary = ["Boo", "Foo", "Woo"]
8
p fetch_and_downcase(ary, 1)     #=> "foo"
List 8.12 : http_get.rb
1
require "net/http"
2
url = URI.parse("http://www.ruby-lang.org/ja/")
3
http = Net::HTTP.start(url.host, url.port)
4
doc = http.get(url.path)
5
puts doc
第9章 エラー処理と例外
List 9.1 : wc.rb
01
ltotal = 0                           # 行数の合計
02
wtotal = 0                           # 単語数の合計
03
ctotal = 0                           # 文字数の合計
04
ARGV.each do |file|
05
  begin
06
    input = open(file)               # ファイルを開く（A）
07
    l = 0                            # file内の行数
08
    w = 0                            # file内の単語数
09
    c = 0                            # file内の文字数
10
    while line = input.gets
11
      l += 1
12
      c += line.size
13
      line.sub!(/^\s+/, "")          # 行頭の空白を削除
14
      ary = line.split(/\s+/)        # 空白文字で分解する
15
      w += ary.size
16
    end
17
    input.close                      # ファイルを閉じる
18
    printf("%8d %8d %8d %s\n", l, w, c, file) # 出力を整形する
19
    ltotal += l
20
    wtotal += w
21
    ctotal += c
22
  rescue => ex
23
    print ex.message, "\n"   # 例外のメッセージを出力（B）
24
  end
25
end
26
printf("%8d %8d %8d %s\n", ltotal, wtotal, ctotal, "total")
List 9.2 : catch_and_throw.rb
01
def test_throw
02
  throw :test
03
end
04
 
05
puts "test start"
06
catch(:test) do
07
  puts "before test_throw()"
08
  test_throw()
09
  puts "after test_throw()"
10
end
11
puts "test end"
第10章 数値(Numeric)クラス
ファイル名のあるソースコードはありません。

第11章 配列(Array)クラス
List 11.1 : list.rb
1
list = ["a", "b", "c", "d"]
2
for i in 0..3
3
  print i+1,"番目の要素は",list[i],"です。\n"
4
end
List 11.2 : sum_list.rb
1
list = [1, 3, 5, 7, 9]
2
sum = 0
3
for i in 0..4
4
  sum += list[i]
5
end
6
print "合計:",sum,"\n"
List 11.3 : sum_list2.rb
1
list = [1, 3, 5, 7, 9]
2
sum = 0
3
list.each do |elem|
4
  sum += elem
5
end
6
print "合計:",sum,"\n"
List 11.4 : list2.rb
1
list = ["a", "b", "c", "d"]
2
list.each_with_index do |elem, i|
3
  print i+1,"番目の要素は",elem,"です。\n"
4
end
List 11.5 : sum_with_each.rb
01
ary1 = [1, 2, 3, 4, 5]
02
ary2 = [10, 20, 30, 40, 50]
03
ary3 = [100, 200, 300, 400, 500]
04
 
05
i = 0
06
result = []
07
while i < ary1.length
08
  result << ary1[i] + ary2[i] + ary3[i]
09
  i += 1
10
end
11
p result   #=> [111, 222, 333, 444, 555]
List 11.6 : sum_with_zip.rb
1
ary1 = [1, 2, 3, 4, 5]
2
ary2 = [10, 20, 30, 40, 50]
3
ary3 = [100, 200, 300, 400, 500]
4
 
5
result = []
6
ary1.zip(ary2, ary3) do |a, b, c|
7
  result <<  a + b + c
8
end
9
p result   #=> [111, 222, 333, 444, 555]
第12章 文字列(String)クラス
ファイル名のあるソースコードはありません。

第13章 ハッシュ(Hash)クラス
List 13.1 : word_count.rb
01
# 単語数のカウント
02
 2:
03
count = Hash.new(0)
04
 4:
05
## 単語の集計
06
while line = gets
07
  words = line.split
08
  words.each do |word|
09
    count[word] += 1
10
  end
11
end
12
12:
13
## 結果の出力
14
count.sort{|(k1,v1), (k2,v2)| v1 <=> v2}.each do |key, value|
15
  print "#{key}: #{value}\n"
16
end
第14章 正規表現(Regexp)クラス
List 14.1 : scan1.rb
1
"abracatabra".scan(/.a/) do |matched|
2
  p matched
3
end
List 14.2 : scan2.rb
1
"abracatabra".scan(/(.)(a)/) do |matched|
2
  p matched
3
end
List 14.3 : scan3.rb
1
"abracatabra".scan(/(.)(a)/) do |a, b|
2
  p a+"-"+b
3
end
List 14.4 : url_match.rb
1
str = "http://www.ruby-lang.org/ja/"
2
%r|http://([^/]*)/| =~ str
3
print "server address: ", $1, "\n"
第15章 IOクラス
List 15.1 : out.rb
1
$stdout.print "Output to $stdout.\n" # 標準出力
2
$stderr.print "Output to $stderr.\n" # 標準エラー出力
List 15.2 : tty.rb
1
if $stdin.tty?
2
  print "Stdin is a TTY.\n"
3
else
4
  print "Stdin is not a TTY.\n"
5
end
List 15.3 : read_uri.rb
01
require "open-uri"
02
 
03
# HTTP経由でデータを読み込む
04
open("http://www.ruby-lang.org") do |io|
05
  puts io.read       # Rubyのホームページをコンソールに出力する
06
end
07
 
08
# FTP経由でデータを読み込む
09
open("ftp://www.ruby-lang.org/pub/ruby/1.8/ruby-1.8.7.tar.gz") do |io|
10
  open("ruby-1.8.7.tar.gz", "w") do |f|  # ローカルファイルを開く
11
    f.write(io.read)
12
  end
13
end
List 15.4 : read_uri_ja.rb
1
require "open-uri"
2
 
3
options = {
4
  "Accept-Language" => "ja, en;q=0.5",
5
}
6
open("http://www.ruby-lang.org", options){|io|
7
  puts io.read
8
}
List 15.5 : stringio_puts.rb
1
require "stringio"
2
 
3
io = StringIO.new
4
io.puts("A")
5
io.puts("B")
6
io.puts("C")
7
io.rewind
8
p io.read #=> "A\nB\nC\n"
List 15.6 : stringio_gets.rb
1
require "stringio"
2
 
3
io = StringIO.new("A\nB\nC\n")
4
p io.gets #=> "A\n"
5
p io.gets #=> "B\n"
6
p io.gets #=> "C\n"
List 15.7 : stdout_put.rb
1
$stdout.puts "foo", "bar", "baz"
List 15.8 : stdout_putc.rb
1
$stdout.putc(82)  # 82は「R」のASCIIコード
2
$stdout.putc(?R)
3
$stdout.putc("\n")
List 15.9 : test_buffering1.rb
1
$stdout.print "out1 "
2
$stderr.print "err1 "
3
$stdout.print "out2 "
4
$stdout.print "out3 "
5
$stderr.print "err2\n"
6
$stdout.print "out4\n"
List 15.10 : test_buffering2.rb
1
$stdout.print "out1 "; $stdout.flush
2
$stderr.print "err1 "
3
$stdout.print "out2 "; $stdout.flush
4
$stdout.print "out3 "; $stdout.flush
5
$stderr.print "err2\n"
6
$stdout.print "out4\n"
List 15.11 : test_buffering3.rb
1
$stdout.sync = true        # 出力の同期を取る
2
$stdout.print "out1 "
3
$stderr.print "err1 "
4
$stdout.print "out2 "
5
$stdout.print "out3 "
6
$stderr.print "err2\n"
7
$stdout.print "out4\n"
List 15.12 : simple_grep_gz.rb
01
pattern = Regexp.new(ARGV[0])
02
filename = ARGV[1]
03
if /.gz$/ =~ filename
04
  file = IO.popen("gunzip -c #{filename}")
05
else
06
  file = File.open(filename)
07
end
08
while text = file.gets do
09
  if pattern =~ text
10
    print text
11
  end
12
end
第16章 FileクラスとDirクラス
List 16.1 : traverse.rb
01
def traverse(path)
02
  if FileTest.directory?(path) # ディレクトリの場合
03
    dir = Dir.open(path)
04
    while name = dir.read
05
      next if name == "."      # ※
06
      next if name == ".."     # ※
07
      traverse(path + "/" + name)
08
    end
09
    dir.close
10
  else
11
    process_file(path)         # ファイルに対する処理
12
  end
13
end
14
def process_file(path)
15
  puts path                    # ひとまず出力するだけ
16
end
17
 
18
traverse(ARGV[0])
List 16.2 : traverse_by_glob.rb
1
def traverse(path)
2
  Dir.glob(["#{path}/**/*", "#{path}/**/.*"]).each do |name|
3
    unless FileTest.directory?(name)
4
      process_file(name)
5
    end
6
  end
7
end
List 16.3 : listdir.rb
01
require 'find'
02
 
03
IGNORES = [ /^\./, /^CVS$/, /^RCS$/ ]
04
 
05
def listdir(top)
06
  Find.find(top) do |path|
07
    if FileTest.directory?(path)     # pathがディレクトリならば
08
      dir, base = File.split(path)
09
      IGNORES.each do |re|
10
        if re =~ base                # 無視したいディレクトリの場合
11
          Find.prune                 # それ以下の検索を省略する
12
        end
13
      end
14
      puts path                      # 出力する
15
    end
16
  end
17
end
18
 
19
listdir(ARGV[0])
第17章 TimeクラスとDateクラス
ファイル名のあるソースコードはありません。

第18章 Ruby落ち穂ひろい
List 18.1 : s_opt_sample.rb
1
puts "$foo: #{$foo}"
2
puts "$bar: #{$bar}"
3
puts "$baz: #{$baz}"
List 18.2 : warning_sample.rb
01
class WarningTest
02
  def initialize
03
    @test = "test."
04
  end
05
  def test
06
    print @tset,"\n"     ##「@test」を「@tset」と書いている!
07
  end
08
end
09
 
10
sample_test = WarningTest.new
11
sample_test.test
List 18.3 : backquote_sample.rb
1
dirlist = `dir`
2
dirlist.each{|line|
3
  if line =~ /.rb$/i
4
    print line
5
  end
6
}
List 18.4 : data_sample.rb
1
data = DATA.read
2
print data
3
 
4
__END__
5
ここに書かれている文字は，スクリプトとして解釈
6
されずに，そのままデータとして使用されます。
List 18.5 : lib_with_sample.rb
01
# クラスの定義
02
class Foo
03
  def initialize
04
    puts "foo!!"
05
  end
06
end
07
 
08
if __FILE__ == $0
09
  Foo.new   # サンプルコード
10
end
List 18.6 : param_grouping.rb
1
hash = {:a=>100, :b=>200, :c=>300}
2
hash.each_with_index do |(key, value), index|
3
  p [key, value, index]
4
end
List 18.7 : local_scope.rb
01
var = 1            # ファイル内のvar
02
class Foo
03
  var = 2          # クラス定義内のvar
04
  def meth
05
    var = 3        # メソッド定義内のvar
06
  end
07
end
08
 
09
=== ローカル変数の初期化
10
 
11
　ローカル変数は，最初に代入されたときに初期化されます。初期化されていないローカル変数を参照しようとすると例外（NameError）が発生します。
12
 
13
//cmd{
14
> 【ruby -e 'puts a'】
15
-e:1: undefined local variable or method `a' for main:Object (NameError)
List 18.8 : local_scope_test.rb
01
def local_scope_test(n)
02
  if n > 0
03
    positive = true
04
  elsif n < 0
05
    negative = true
06
  else
07
    zero = true
08
  end
09
  return [positive, negative, zero]
10
end
11
p local_scope_test(1)
12
p local_scope_test(0)
13
p local_scope_test(-1)
List 18.9 : local_and_block.rb
1
x = 1                # xを初期化
2
ary = [1, 2, 3]
3
 
4
ary.each do |x|      # ブロック変数としてxを使用する
5
  # …
6
end
7
 
8
p x                  # xの値を確認する
List 18.10 : local_and_block_new.rb
01
x = y = z = 0            # xとyとzを初期化
02
ary = [1, 2, 3]
03
 
04
ary.each do |x; y|   # ブロック変数x，ブロックローカル変数yを使用
05
  y = x                 # ブロックローカルyを代入
06
  z = x                 # ブロックローカルでないzを代入
07
  p [x, y, z]           # ブロック内のxとyの値を確認する
08
end
09
 
10
p [x, y, z]             # xとyの値を確認する
第19章 演算子
List 19.1 : vector.rb
01
class Vector
02
  attr_reader :x, :y
03
  def initialize(x=0, y=0)
04
    @x, @y = x, y
05
  end
06
  def inspect         # 表示用
07
    "(#{@x}, #{@y})"
08
  end
09
  def +(other)
10
    Vector.new(@x + other.x, @y + other.y) # x, y のそれぞれを足す
11
  end
12
  def -(other)
13
    Vector.new(@x - other.x, @y - other.y) # x, y のそれぞれを引く
14
  end
15
end
16
 
17
vec0 = Vector.new(3, 6)
18
vec1 = Vector.new(1, 8)
19
 
20
p vec0          #=> (3, 6)
21
p vec1          #=> (1, 8)
22
p vec0 + vec1   #=> (4, 14)
23
p vec0 - vec1   #=> (2, -2)
第20章 ブロック
List 20.1 : print_times.rb
1
5.times do
2
  print "<br>\n"
3
end
List 20.2 : print_no_times.rb
1
print "<br>\n"
2
print "<br>\n"
3
print "<br>\n"
4
print "<br>\n"
5
print "<br>\n"
List 20.3 : sum_each.rb
1
sum = 0
2
(1..5).each do |i|
3
  sum += i
4
end
5
print "合計: ",sum,"\n"
List 20.4 : sum_no_each.rb
1
sum = 0
2
sum += 1
3
sum += 2
4
sum += 3
5
sum += 4
6
sum += 5
7
print "合計: ",sum,"\n"
List 20.5 : print_fruit.rb
1
fruits = ['リンゴ', 'バナナ', 'パイナップル']
2
fruits.each do |elem|
3
  print elem,"\n"
4
end
List 20.6 : hash_each.rb
1
sum = 0
2
outcome = {"参加費"=>1000, "ストラップ代"=>1000,"懇親会会費"=>4000}
3
outcome.each do |item, price|
4
  sum += price
5
end
6
print "合計: ",sum,"\n"
List 20.7 : hash_each2.rb
1
sum = 0
2
outcome = {"参加費"=>1000, "ストラップ代"=>1000,"懇親会会費"=>4000}
3
outcome.each do |pair|
4
  sum += pair[1]   # 値を指定している
5
end
6
print "合計: ",sum,"\n"
List 20.8 : file_each.rb
1
f = File.open("sample.txt")
2
f.each do |line|
3
  print line
4
end
5
f.close
List 20.9 : file_each2.rb
1
File.open("sample.txt") do |f|
2
  f.each_line do |line|
3
    print line
4
  end
5
end
List 20.10 : book.rb
1
class Book
2
  attr_accessor :title, :author, :genre
3
  def initialize(title, author, genre=nil)
4
    @title  = title
5
    @author = author
6
    @genre = genre
7
  end
8
end
List 20.11 : booklist.rb
01
require 'book'
02
 
03
class BookList
04
  ## 初期化
05
  def initialize()
06
    @booklist = Array.new
07
  end
08
  ## 新しい本を加える
09
  def add(book)
10
    @booklist.push(book)
11
  end
12
  ## 本の冊数を返す
13
  def length
14
    @booklist.length
15
  end
16
  ## n番目に格納されている本を別の本にする
17
  def []=(n,book)
18
    @booklist[n] = book
19
  end
20
  ## n番目に格納されている本を返す
21
  def [](n)
22
    @booklist[n]
23
  end
24
  ## 本をリストから削除する
25
  def delete(book)
26
    @booklist.delete(book)
27
  end
28
end
List 20.12 : booklist_test.rb
01
require 'book'
02
require 'booklist'
03
 
04
# 本のリストを作る。最初はリストは空になる
05
booklist = BookList.new
06
# リストに挿入したい本を用意する
07
b1 = Book.new("せめて，本格らしく","城平京")
08
b2 = Book.new("Neo Aqua III","Neo Aqua")
09
# リストに本を追加する
10
booklist.add(b1)
11
booklist.add(b2)
12
# リストの本を出力する
13
print booklist[0].title, "\n"
14
print booklist[1].title, "\n"
List 20.14 : proc1.rb
1
pr = Proc.new{
2
  p "a"
3
}
4
p "b"
5
pr.call()
List 20.15 : proc2.rb
1
def foo(a, b, &block)
2
  block.call(a, b)
3
end
4
 
5
foo("a1", "b1"){|a, b|
6
  p a
7
  p b
8
}
第21章 Mix-in
List 21.1 : book_cmp.rb
01
class Book
02
  include Comparable
03
 
04
  def <=>(other)
05
    t = @genre.to_s <=> other.genre.to_s  # ジャンルを比較する
06
    return t if t != 0                # 違うジャンルならそのまま返す
07
    return @title <=> other.title     # タイトルを比較した結果を返す
08
  end
09
 
10
  attr_accessor :title, :author, :genre
11
 
12
  def initialize(title, author, genre=nil)
13
    @title  = title
14
    @author = author
15
    @genre = genre
16
  end
17
end
List 21.2 : book_test.rb
01
require 'book_cmp'
02
 
03
ary = []
04
ary << Book.new("Software", "Rucker", "SF")
05
ary << Book.new("BABEL-17", "Delany", "SF")
06
ary << Book.new("Programming Perl",   "Wall",  "Computer")
07
ary << Book.new("Programming Pearls", "Bentley", "Computer")
08
 
09
ary.sort.each{|book|
10
  printf "%-10s %-20s %s\n", book.genre, book.title, book.author
11
}
List 21.3 : booklist_enum.rb
01
require "booklist"
02
 
03
class BookList
04
  include Enumerable
05
  def each
06
    @booklist.each{|book|
07
      yield(book)
08
    }
09
  end
10
end
List 21.4 : booklist_enum_test.rb
01
require "booklist_enum"
02
 
03
booklist = BookList.new
04
booklist.add(Book.new("Software", "Rucker", "SF"))
05
booklist.add(Book.new("BABEL-17", "Delany", "SF"))
06
booklist.add(Book.new("Programming Perl",   "Wall",
07
                      "Computer"))
08
booklist.add(Book.new("Programming Pearls", "Bentley",
09
                      "Computer"))
10
titles = booklist.collect{|book|
11
  book.title
12
}
13
p titles
第22章 HTMLやRSSの解析
List 22.1 : open-uri-sample.rb
1
require 'open-uri'
2
open("http://www.ruby-lang.org/ja/") do |f|
3
  5.times do
4
    print f.gets
5
  end
6
end
List 22.2 : nokogiri-h3.rb
1
require 'rubygems'
2
require 'open-uri'
3
require 'nokogiri'
4
 
5
doc = Nokogiri::HTML(open("http://www.ruby-lang.org/ja/"),nil,'utf-8')
6
doc.css('h3').each do |h3|
7
  puts h3.text
8
end
List 22.3 : nokogiri-h3-local.rb
01
require 'rubygems'
02
require 'open-uri'
03
require 'nokogiri'
04
 
05
filename = ARGV[0]
06
 
07
doc = Nokogiri::HTML(open(filename),nil, 'utf-8')
08
doc.css('h3').each do |h3|
09
  puts h3.text
10
end
List 22.4 : nokogiri-a.rb
01
require 'rubygems'
02
require 'open-uri'
03
require 'nokogiri'
04
 
05
filename = ARGV[0]
06
doc = Nokogiri::HTML(open(filename),nil,'utf-8')
07
doc.css('a').each do |a|
08
  url = URI.parse(a["href"])
09
  if url.host
10
    puts "#{a.text}:#{a["href"]}"
11
  end
12
end
List 22.5 : rss-parse.rb
1
require 'rss'
2
 
3
url = 'http://www.ruby-lang.org/ja/feeds/news.rss'
4
rss = RSS::Parser.parse(url)
5
puts rss.channel.title
List 22.6 : rss-items.rb
1
require 'rss'
2
 
3
url = 'http://www.ruby-lang.org/ja/feeds/news.rss'
4
rss = RSS::Parser.parse(url)
5
 
6
rss.items.each do |item|
7
  print item.pubDate.strftime("%Y/%m/%d"),":",item.title,"\n"
8
end
List 22.7 : nokogiri-detectrss.rb
01
require 'rubygems'
02
require 'open-uri'
03
require 'nokogiri'
04
require 'rss'
05
 
06
filename = ARGV[0]
07
doc = Nokogiri::HTML(open(filename),nil,'utf-8')
08
doc.css('link').each do |link|
09
  if link['type'] == 'application/rss+xml' && link['rel'] == 'alternate'
10
    href = link['href']
11
    url = URI.join(filename, href)
12
    puts "detect: #{url}"
13
 
14
    rss = RSS::Parser.parse(url)
15
 
16
    rss.items.each do |item|
17
      print item.pubDate.strftime("%Y/%m/%d"),":",item.title,"\n"
18
    end
19
     
20
  end
21
end
第23章 HTTPサーバのアクセスログ解析
文中で使用しているsample-access.logははこちらから取得してください。→sample-access.log

List 23.1 : accesslog_count.rb
1
count = 0                   # 行数を初期化する
2
File.open(ARGV[0]) do |io|  # ファイルを開く
3
  io.each_line do |line|    # 行ごとに処理する
4
    count += 1              # 行数を更新する
5
  end
6
end
7
puts count                  # 行数を表示する
List 23.2 : accesslog_parse.rb
01
CLF_REGEXP = /
02
  \A                        (?# 行頭)
03
  (\S+)\s                   (?# 1 address)
04
  (\S+)\s                   (?# 2 ident)
05
  (\S+)\s                   (?# 3 user)
06
  \[([^\]]+)\]\s            (?# 4 time)
07
  "(\S+)\s(\S+)\s(\S+)"\s   (?# 5 6 7 method url version)
08
  (\d+)\s                   (?# 8 status)
09
  (\d+|-)\s                 (?# 9 bytes)
10
  "([^"]*)"\s               (?# 10 referer)
11
  "([^"]*)"                 (?# 11 user_agent)
12
  \Z                        (?# 行末)
13
/x
14
 
15
count = 0                   # 行数を初期化する
16
File.open(ARGV[0]) do |io|  # ファイルを開く
17
  io.each_line do |line|    # 1行ごとに処理する
18
    if CLF_REGEXP =~ line   # 正規表現にマッチしたら
19
      p $~.captures         # キャプチャした部分を表示する
20
    end
21
    count += 1              # 行数を更新する
22
  end
23
end
24
puts count                  # 行数を表示する
List 23.3 : access_log.rb
01
module AccessLog
02
  CLF_REGEXP = /
03
    \A                        (?# 行頭)
04
    (\S+)\s                   (?# 1 address)
05
    (\S+)\s                   (?# 2 ident)
06
    (\S+)\s                   (?# 3 user)
07
    \[([^\]]+)\]\s            (?# 4 time)
08
    "(\S+)\s(\S+)\s(\S+)"\s   (?# 5 6 7 method url version)
09
    (\d+)\s                   (?# 8 status)
10
    (\d+|-)\s                 (?# 9 bytes)
11
    "([^"]*)"\s               (?# 10 referer)
12
    "([^"]*)"                 (?# 11 user_agent)
13
    \Z                        (?# 行末)
14
  /x
15
 
16
  Entry = Struct.new(   # 解析結果を保存するためのクラス
17
    :address, :ident, :user, :time,
18
    :method, :url, :version, :status, :byte,
19
    :referer, :user_agent
20
  )
21
 
22
  module_function
23
 
24
  def each_entry(file)
25
    file.each_line do |line|
26
      if entry = parse(line)
27
        yield(entry)
28
      end
29
    end
30
  end
31
 
32
  def parse(line)
33
    if m = CLF_REGEXP.match(line)
34
      return Entry.new(*m.captures)
35
    end
36
    $stderr.puts("parse failure: #{line.dump}")
37
    return nil
38
  end
39
end
List 23.4 : accesslog_parse2.rb
01
require "access_log"        # access_log.rbを読み込む
02
 
03
count = 0
04
File.open(ARGV[0]) do |io|
05
  AccessLog.each_entry(io) do |entry|
06
    p entry.to_a            # エントリを表示する
07
    count += 1
08
  end
09
end
10
puts count
List 23.5 : Rakefile
01
require "access_log"
02
 
03
entries = []
04
task :load do
05
  logfile = ENV["LOGFILE"] || "access.log"  # ログファイル名
06
  puts "loading #{logfile}."             # メッセージを表示する
07
  File.open(logfile) do |log|            # ログファイルを開いて
08
    AccessLog.each_entry(log) do |entry| # すべてのエントリを読み込む
09
      entries << entry
10
    end
11
  end
12
end
13
 
14
desc "時間帯別のアクセス数を集計する"
15
task :time => :load do
16
  hour_count = Hash.new(0)              # 集計用のハッシュ
17
  entries.each do |entry|               # エントリを順に処理する
18
    times = entry.time.split(/[:\/ ]/)  # 時刻を分割する
19
    hour_count[times[3]] += 1           # 「時」のカウントを追加する
20
  end
21
  hours = hour_count.keys.sort          # 「時」の一覧を取得する
22
  hours.each do |h|                     # 集計結果を順に表示する
23
    printf("%s: %s\n", h, "#" * (hour_count[h]/3))
24
  end
25
end
26
 
27
desc "URL別にアクセス数を集計する"
28
task :url => :load do
29
  url_count = Hash.new(0)              # 集計用のハッシュ
30
  entries.each do |entry|              # エントリを順に処理する
31
    url_count[entry.url] += 1          # URLのカウントを追加する
32
  end
33
  ranking = url_count.sort_by{|url, count| -count }
34
         # アクセス数の降順になるようにハッシュの要素をソート
35
  ranking.each do |url, count|         # 集計結果を順に表示する
36
    printf("%d: %p\n", count, url)
37
  end
38
end
39
 
40
desc "エラーになったアクセスを表示する"
41
task :error => :load do
42
  entries.each do |entry|       # エントリを順に処理する
43
    if /^[45]/ =~ entry.status  # ステータスが4xxか5xxなら表示する
44
      printf("%p %p %p\n", entry.time, entry.status, entry.url)
45
    end
46
  end
47
end
48
 
49
task :default => [:time, :error, :url]
